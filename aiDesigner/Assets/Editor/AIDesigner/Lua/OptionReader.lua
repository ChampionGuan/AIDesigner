---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/7/20 12:52
---

local CustomSettings = CS.AIDesigner.Define.CustomSettings
local AIDesignerLogicUtility = CS.AIDesigner.AIDesignerLogicUtility
local DefineTables = {}
local VarTypeCache = {}

local function IsTable(tab)
    return type(tab) == 'table'
end

require(AIDesignerLogicUtility.LuaFilePathLegalization(CustomSettings.AIDefinePath))
for index = 0, CustomSettings.DefinePath.Length - 1 do
    local path = AIDesignerLogicUtility.LuaFilePathLegalization(CustomSettings.DefinePath[index])
    local ok, tab = pcall(require, path)
    if ok then
        if IsTable(tab) then
            table.insert(DefineTables, tab)
        end
    else
        print(string.format("[OptionReader]Task文件路径不存在或加载失败，请检查！文件路径=%s", path))
    end
end

local function LoadOptions(varType, callBack)
    if not varType or '' == varType then
        callBack(nil, nil)
        return
    end

    if VarTypeCache[varType] then
        callBack(VarTypeCache[varType][1], VarTypeCache[varType][2])
        return
    end

    local keys = nil
    local values = nil
    local tab = _G[varType]
    if not IsTable(tab) then
        for _, sub in ipairs(DefineTables) do
            tab = sub[varType]
            if IsTable(tab) then
                break
            end
        end
    end

    if IsTable(tab) then
        keys = {}
        values = {}
        local keyType = nil
        local valueType = nil
        for _key, _value in pairs(tab) do
            if not keyType then
                keyType = type(_key)
            end
            if not valueType then
                valueType = type(_value)
            end
            if keyType ~= 'string' or (valueType ~= 'number' and valueType ~= 'string') or keyType ~= type(_key) or valueType ~= type(_value) then
                callBack(nil, nil)
                return
            end

            if valueType == 'number' then
                local index = #values
                while true do
                    if index < 1 or _value > values[index] then
                        table.insert(keys, index + 1, _key .. ' (' .. _value .. ')')
                        table.insert(values, index + 1, _value)
                        break
                    end
                    index = index - 1
                end
            else
                table.insert(keys, _key)
                table.insert(values, _value)
            end
        end
    end

    VarTypeCache[varType] = { keys, values }
    callBack(keys, values)
end

return LoadOptions