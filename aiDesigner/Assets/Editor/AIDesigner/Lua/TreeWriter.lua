---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/7/20 12:45
---

local PairsByKeys = nil
local SortByKey = nil
local TableToStr = nil
local LuaToString = nil
local StringToLua = nil
local Rapidjson = nil
local TreeConfig = { runtime = nil, editor = nil, paths = nil }

local AIDefine = CS.AIDesigner.Define
local AIDesignerLogicUtility = CS.AIDesigner.AIDesignerLogicUtility
local Convert = CS.System.Convert
local Animator = CS.UnityEngine.Animator
local PathIDs = {}

---@class TreeWriter
local TreeWriter = {}

PairsByKeys = function(t, f)
    local a = {}
    for n in pairs(t) do
        table.insert(a, n)
    end
    table.sort(a, f)
    local i = 0
    local iter = function()
        i = i + 1
        if a[i] == nil then
            return nil
        else
            return a[i], t[a[i]]
        end
    end
    return iter
end

SortByKey = function(a, b)
    if type(a) == 'number' and type(b) == "number" then
        return a < b
    end
    return tostring(a) < tostring(b)
end

StringToLua = function(value)
    return load('return ' .. value)()
end

---@param value any
LuaToString = function(value)
    if type(value) == 'table' then
        return TableToStr(value)
    elseif type(value) == 'string' then
        return '\'' .. value .. '\''
    else
        return tostring(value)
    end
end

---@param t table
TableToStr = function(t)
    if t == nil then
        return ''
    end

    local retstr = '{'

    local i = 1
    for key, value in PairsByKeys(t, SortByKey) do
        local signal = ','
        if i == 1 then
            signal = ''
        end

        if key == i then
            retstr = retstr .. signal .. LuaToString(value)
        else
            if type(key) == 'string' then
                retstr = retstr .. signal .. key .. '=' .. LuaToString(value)
            elseif type(key) == 'number' then
                retstr = retstr .. signal .. '[' .. LuaToString(key) .. ']=' .. LuaToString(value)
            else
                if type(key) == 'userdata' then
                    retstr = retstr .. signal .. '*s' .. TableToStr(getmetatable(key)) .. '*e' .. '=' .. LuaToString(value)
                else
                    retstr = retstr .. signal .. key .. '=' .. LuaToString(value)
                end
            end
        end

        i = i + 1
    end

    return retstr .. '}'
end

local function GetPathID(path)
    local id = PathIDs[path]
    if not id then
        id = Animator.StringToHash(path)
        PathIDs[path] = id
    end
    return id
end

local function WriteFile(path, content)
    local ok, file = pcall(assert, io.open(path, 'w+b'))
    if ok then
        if file:write(content) == nil then
            return false
        end
        io.close(file)
        return true
    else
        return false
    end
end

local function SetVariableEditor(key, tab)
    if not key then
        return
    end
    if not TreeConfig.editor then
        TreeConfig.editor = {}
    end
    local variablesEditorConfig = TreeConfig.editor.variables
    if not variablesEditorConfig then
        variablesEditorConfig = {}
        TreeConfig.editor.variables = variablesEditorConfig
    end
    variablesEditorConfig[key] = tab
end

local function SetTaskEditor(hashID, tab)
    if not hashID then
        return
    end
    if not TreeConfig.editor then
        TreeConfig.editor = {}
    end
    local taskEditorConfig = TreeConfig.editor.tasks
    if not taskEditorConfig then
        taskEditorConfig = {}
        TreeConfig.editor.tasks = taskEditorConfig
    end
    taskEditorConfig[hashID] = tab
end

local function ParseChildToLua(taskIns)
    if nil == taskIns or taskIns:Equals(nil) then
        return nil
    end

    local taskPathID = GetPathID(taskIns.Path)
    TreeConfig.paths[taskPathID] = taskIns.Path

    ---@type TaskEditorConfig
    local taskEditorConfig = {}
    taskEditorConfig.pathID = taskPathID
    taskEditorConfig.offset = { x = taskIns.TaskRectOffset.x, y = taskIns.TaskRectOffset.y }
    taskEditorConfig.comment = AIDesignerLogicUtility.ToReplaceEntersymbol(taskIns.Comment)
    if not taskIns.IsFoldout then
        taskEditorConfig.foldout = false
    end
    if taskIns.IsBreakpoint == true then
        taskEditorConfig.breakpoint = true
    end
    SetTaskEditor(taskIns.HashID, taskEditorConfig)

    ---@type TaskRelationConfig
    local taskRuntimeConfig = {}
    taskRuntimeConfig.task = {}
    taskRuntimeConfig.task.hashID = taskIns.HashID
    taskRuntimeConfig.task.disabled = taskIns.IsDisabled or nil
    taskRuntimeConfig.task.pathID = taskPathID
    taskRuntimeConfig.task.refTask = taskIns.IsRefTask or nil
    if Convert.ToInt32(taskIns.Type) == AITaskType.Composite then
        taskRuntimeConfig.task.abortType = Convert.ToInt32(taskIns.AbortType)
    end

    if nil ~= taskIns.Variables and taskIns.Variables.Count > 0 then
        taskRuntimeConfig.task.vars = {}
        for i = 0, taskIns.Variables.Count - 1 do
            table.insert(taskRuntimeConfig.task.vars, StringToLua(taskIns.Variables[i]:VarToLua()))
        end
    end

    if nil ~= taskIns.Children and taskIns.Children.Count > 0 then
        taskRuntimeConfig.children = {}
        for i = 0, taskIns.Children.Count - 1 do
            table.insert(taskRuntimeConfig.children, ParseChildToLua(taskIns.Children[i]))
        end
    end
    return taskRuntimeConfig
end

local function ParseTreeVarsToLua (treeVars)
    if nil == treeVars or treeVars:Equals(nil) or treeVars.Count <= 0 then
        return nil
    end

    local varsConfig = {}
    for i = 0, treeVars.Count - 1 do
        local editorConfig = {}
        editorConfig.desc = AIDesignerLogicUtility.ToReplaceEntersymbol(treeVars[i].Desc)
        SetVariableEditor(treeVars[i].Key, editorConfig)
        table.insert(varsConfig, StringToLua(treeVars[i]:VarToLua()))
    end
    return varsConfig
end

local function ParseAuxiliaryTreeToLua (trees)
    local tab = {}
    if trees then
        for i = 0, trees.Count - 1 do
            local tree = ParseChildToLua(trees[i])
            if tree then
                table.insert(tab, tree)
            end
        end
    end
    return tab
end

local function SaveAsJson(fullName)
    if not Rapidjson then
        Rapidjson = require("rapidjson")
    end
    if not Rapidjson then
        return
    end

    if not __funcBeforeSaveAsJson then
        __funcBeforeSaveAsJson = function(root)
            if not root then
                return
            end
            root.task.path = TreeConfig.paths[root.task.pathID]
            root.task.pathID = nil
            if root.children then
                for _, child in ipairs(root.children) do
                    __funcBeforeSaveAsJson(child)
                end
            end
        end
    end
    __funcBeforeSaveAsJson(TreeConfig.runtime.entry)

    local path = string.format('%s/%s%s.json', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, fullName)
    WriteFile(path, Rapidjson.encode(TreeConfig.runtime))
end

local function SaveConfig (fullName, saveToJson)
    fullName = AIDesignerLogicUtility.StringReplace(fullName, '.', '/')

    local path1 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.EditorConfigFullPath, fullName)
    local path2 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, fullName)
    WriteFile(path1, string.format('local tree = %s return tree', TableToStr(TreeConfig.editor)))
    WriteFile(path2, string.format('local tree = %s local paths = %s return {tree = tree, paths = paths}', TableToStr(TreeConfig.runtime), TableToStr(TreeConfig.paths)))

    if saveToJson then
        SaveAsJson(fullName)
    end
end

function TreeWriter.Rename(oldFullName, newFullName)
    oldFullName = AIDesignerLogicUtility.StringReplace(oldFullName, '.', '/')
    newFullName = AIDesignerLogicUtility.StringReplace(newFullName, '.', '/')

    local path1 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.EditorConfigFullPath, oldFullName)
    local path2 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.EditorConfigFullPath, newFullName)
    os.rename(path1, path2)

    local path1 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, oldFullName)
    local path2 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, newFullName)
    os.rename(path1, path2)

    local path1 = string.format('%s/%s%s.json', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, oldFullName)
    local path2 = string.format('%s/%s%s.json', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, newFullName)
    os.rename(path1, path2)
end

---@param fullName string
function TreeWriter.Delete(fullName)
    if not fullName or fullName == '' then
        return
    end
    fullName = AIDesignerLogicUtility.StringReplace(fullName, '.', '/')

    local path1 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.EditorConfigFullPath, fullName)
    local path2 = string.format('%s/%s%s.lua', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, fullName)
    local path3 = string.format('%s/%s%s.json', AIDefine.CustomSettings.AppDataPath, AIDefine.ConfigFullPath, fullName)
    os.remove(path1)
    os.remove(path2)
    os.remove(path3)
end

function TreeWriter.Create(fullName)
    TreeConfig.editor = {}
    TreeConfig.runtime = {}
    TreeConfig.paths = {}
    SaveConfig(fullName)
end

function TreeWriter.Save(tree, saveToJson)
    if nil == tree or tree:Equals(nil) then
        return
    end

    TreeConfig.paths = {}
    TreeConfig.editor = {}
    TreeConfig.editor.tasks = {}
    TreeConfig.editor.variables = {}
    TreeConfig.editor.trees = ParseAuxiliaryTreeToLua(tree.AuxiliaryTrees)
    TreeConfig.runtime = {}
    TreeConfig.runtime.desc = AIDesignerLogicUtility.ToReplaceEntersymbol(tree.Desc)
    TreeConfig.runtime.tickInterval = tree.TickInterval
    TreeConfig.runtime.pauseWhenComplete = tree.PauseWhenComplete or nil
    TreeConfig.runtime.resetValuesOnRestart = tree.ResetValuesOnRestart or nil
    TreeConfig.runtime.entry = ParseChildToLua(tree.Entry)
    TreeConfig.runtime.vars = ParseTreeVarsToLua(tree.Variables)
    SaveConfig(tree.FullName, saveToJson)
end

return TreeWriter